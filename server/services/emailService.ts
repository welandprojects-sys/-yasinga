import nodemailer from 'nodemailer';
import path from 'path';
import fs from 'fs';

interface EmailConfig {
  host: string;
  port: number;
  secure: boolean;
  auth: {
    user: string;
    pass: string;
  };
}

interface EmailOptions {
  to: string;
  subject: string;
  text: string;
  html?: string;
  attachments?: Array<{
    filename: string;
    path: string;
  }>;
}

class EmailService {
  private transporter: nodemailer.Transporter | null = null;

  constructor() {
    this.initializeTransporter();
  }

  private initializeTransporter() {
    // Gmail SMTP configuration
    const config: EmailConfig = {
      host: 'smtp.gmail.com',
      port: 587,
      secure: false, // true for 465, false for other ports
      auth: {
        user: process.env.GMAIL_EMAIL || '',
        pass: process.env.GMAIL_APP_PASSWORD || ''
      }
    };

    if (!config.auth.user || !config.auth.pass) {
      console.warn('‚ö†Ô∏è Gmail credentials not configured. Email functionality will be disabled.');
      return;
    }

    try {
      this.transporter = nodemailer.createTransporter(config);
      console.log('‚úÖ Gmail SMTP configured successfully');
    } catch (error) {
      console.error('‚ùå Failed to initialize email service:', error);
    }
  }

  async sendEmail(options: EmailOptions): Promise<boolean> {
    if (!this.transporter) {
      console.error('‚ùå Email transporter not initialized');
      return false;
    }

    try {
      const mailOptions = {
        from: `"Yasinga Expense Tracker" <${process.env.GMAIL_EMAIL}>`,
        to: options.to,
        subject: options.subject,
        text: options.text,
        html: options.html,
        attachments: options.attachments
      };

      const info = await this.transporter.sendMail(mailOptions);
      console.log('‚úÖ Email sent successfully:', info.messageId);
      return true;
    } catch (error) {
      console.error('‚ùå Failed to send email:', error);
      return false;
    }
  }

  async sendBackupReport(userEmail: string, reportType: 'weekly' | 'monthly', fileName: string, reportsDir: string): Promise<boolean> {
    const filePath = path.join(reportsDir, fileName);
    
    if (!fs.existsSync(filePath)) {
      console.error(`‚ùå Report file not found: ${fileName}`);
      return false;
    }

    const reportTitle = reportType === 'weekly' ? 'Weekly' : 'Monthly';
    const dateStr = new Date().toLocaleDateString();

    const subject = `üìä Your ${reportTitle} Yasinga Expense Report - ${dateStr}`;
    
    const htmlContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
          <h1 style="color: white; margin: 0; font-size: 28px;">üìä Yasinga</h1>
          <p style="color: white; margin: 10px 0 0 0; font-size: 16px;">Smart M-Pesa Expense Tracking</p>
        </div>
        
        <div style="background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px;">
          <h2 style="color: #333; margin-top: 0;">Your ${reportTitle} Report is Ready!</h2>
          
          <p style="color: #666; font-size: 16px; line-height: 1.5;">
            Hi! Your ${reportTitle.toLowerCase()} expense report for <strong>${dateStr}</strong> has been generated and is attached to this email.
          </p>
          
          <div style="background: white; border: 1px solid #e9ecef; border-radius: 8px; padding: 20px; margin: 20px 0;">
            <h3 style="color: #333; margin-top: 0;">üìã Report Contains:</h3>
            <ul style="color: #666; padding-left: 20px;">
              <li>Complete transaction summary</li>
              <li>Business vs personal expenses breakdown</li>
              <li>Top spending categories</li>
              <li>Recent transaction history</li>
              <li>Visual spending insights</li>
            </ul>
          </div>
          
          <div style="background: #e7f3ff; border-left: 4px solid #0066cc; padding: 15px; margin: 20px 0;">
            <p style="margin: 0; color: #0066cc;">
              <strong>üí° Tip:</strong> Save this PDF for your records and tax purposes. It contains all your M-Pesa transaction data for the reporting period.
            </p>
          </div>
          
          <div style="text-align: center; margin: 30px 0;">
            <p style="color: #666; font-size: 14px;">
              This is an automated report generated every ${reportType === 'weekly' ? 'Sunday' : 'month'}.
            </p>
          </div>
        </div>
        
        <div style="text-align: center; padding: 20px; color: #999; font-size: 12px;">
          <p>Generated by Yasinga - Smart M-Pesa Expense Tracking</p>
          <p>Kenya's leading expense management solution</p>
        </div>
      </div>
    `;

    const textContent = `
Your ${reportTitle} Yasinga Expense Report - ${dateStr}

Hi! Your ${reportTitle.toLowerCase()} expense report has been generated and is attached to this email.

The report contains:
- Complete transaction summary
- Business vs personal expenses breakdown  
- Top spending categories
- Recent transaction history
- Visual spending insights

Save this PDF for your records and tax purposes.

---
This is an automated report generated every ${reportType === 'weekly' ? 'Sunday' : 'month'}.
Generated by Yasinga - Smart M-Pesa Expense Tracking
    `;

    return await this.sendEmail({
      to: userEmail,
      subject: subject,
      text: textContent,
      html: htmlContent,
      attachments: [
        {
          filename: fileName,
          path: filePath
        }
      ]
    });
  }

  async testConnection(): Promise<boolean> {
    if (!this.transporter) {
      return false;
    }

    try {
      await this.transporter.verify();
      console.log('‚úÖ Gmail SMTP connection verified');
      return true;
    } catch (error) {
      console.error('‚ùå Gmail SMTP connection failed:', error);
      return false;
    }
  }

  isConfigured(): boolean {
    return this.transporter !== null;
  }
}

export const emailService = new EmailService();